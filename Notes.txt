1) Keeping with non-referenced parameters:
        I noticed how Rust's vectors do not take a reference
    for their insert, remove, exc. functions. With this being
    a sudo official example of how a structure should be made
    in Rust I felt that matching this convention would prevent
    confusion for anyone seeking to use my structure.

2) Changes to methods:
    occurrences()
        Similar to the implementation observed from another student.
    Debug::fmt()
        Used the for_each() iterator function.
    Add::add()
        Couldnt use iterators but the code is nicer none the less.
    PartialEq::eq()
        I used the built in slice eq trait, making it much simpler.
    trim_to_size()
        A small expression change.
    erase_one()
        Used iterators and pattern matching.

3) The use of a 3rd-party trait library in place of existing methods:
        As I mentioned before; matching convention helps alleviate
    any confusion when using my stucture.
        While the STD did not have any traits implementing these kind
    of methods, I did find a 3rd-party library that did. Using these
    functions not only with Rust conventional names but as traits
    lets other programs and programmers that recognize these traits
    to know the (expected) functionality of my bag implicitly.

4) The non-generic bag:
        Not much to say with this. Very little changes were needed
    from the generic version.

5) The bagVec:
        This was only an exercise in exploring the functionality of
    the bag when using more of the functionality of the vector it
    was using. One thing to note is how I have less control over
    how the vector behaves when I rely on its internal methods.

6) The simplification of bagexam:
        The motive for this is how the intention of using a test is
    to prove the result and not an overly verbose explanation of it.
    It now has no output except for if any test passed or failed.

7) Implementing the forward iterator:
        The biggest hurdle for this challenge was working with the
    lifetimes of the values used. I used a few more iterator
    methods than was asked for and noticed there were dozens more
    that are avalable for use.
        I did not use the iterator in any of my regular funtions
    because I had not implemented the iterator functions that I
    was using; such as filter() or for_each().

8) Explicit documentation:
        This is an rabbit hole that can go as far as you want it to.
    With a variety of ways to format the comments and even sample
    code to demonstrate, the limit is only how much you want to
    explain.
